<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id$ -->
<html lang="en">
<head>
    <TITLE>
 	JMRI: Threading
    </TITLE>
    <META content="Bob Jacobsen" name=Author>
    <meta name="keywords" content="JMRI technical code threading">

    <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
    <!-- are an arbitrary design pattern used by the update.pl script to -->
    <!-- easily replace the common header/footer code for all the web pages -->

    <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
    <!-- or change them to reflect your alternative logo -->

<!-- Style -->
  <META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

	<div id="mainContent">
	    <H1>JMRI: Threading</H1>
The initial threading model for JMRI is quite simple: Everything interesting
happens in 
the GUI thread.  For example, once a 'message', e.g. a LocoNet packet, 
is accumulated in a separate thread, the message is processed in the 
GUI thread via:
<PRE>
	// message is complete, dispatch it !!<br/>
	{ <br/>
	final LocoNetMessage thisMsg = msg;<br/>
	final LnTrafficController thisTC = this;<br/>
	// return a notification via the queue to ensure end<br/>
	Runnable r = new Runnable() {<br/>
		LocoNetMessage msgForLater = thisMsg;<br/>
		LnTrafficController myTC = thisTC;<br/>
		public void run() { <br/>
				log.debug("Delayed notify starts");<br/>
           		myTC.notify(msgForLater);<br/>
			}<br/>
		};
		javax.swing.SwingUtilities.invokeLater(r);<br/>
	}<br/>
</PRE>

This does a nice job of serializing the activity from the layout.
<p>
Note that this does <em>not</em> mean that other things can't be happening. For example, this script fragment:

<pre><code>
    state = sensors.provideSensor("mySensor").getState()<br/>
    turnouts.provideTurnout("myTurnout").setState(THROWN)<br/>
    print state == sensors.provideSensor("mySensor").getState()<br/>
</code></pre>

can print either true or false, because changing that turnout <em>can</em> change associated sensors instantaneously.

<!--#include virtual="/Footer" -->

	  </div><!-- closes #mainContent-->
	</div> <!-- closes #mBody-->
</body>
</html>

